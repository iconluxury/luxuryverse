/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutTermsConditionsImport } from './routes/_layout/terms-conditions'
import { Route as LayoutPrivacyPolicyImport } from './routes/_layout/privacy-policy'
import { Route as LayoutOptOutImport } from './routes/_layout/opt-out'
import { Route as LayoutJoinImport } from './routes/_layout/join'
import { Route as LayoutCookiesImport } from './routes/_layout/cookies'
import { Route as LayoutCollectionsImport } from './routes/_layout/collections'
import { Route as LayoutAuthCompleteImport } from './routes/_layout/auth-complete'
import { Route as LayoutResourcesBlogImport } from './routes/_layout/resources/blog'
import { Route as LayoutProductsIdImport } from './routes/_layout/products/$id'
import { Route as LayoutResourcesBlogsPathImport } from './routes/_layout/resources/blogs/$path'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutTermsConditionsRoute = LayoutTermsConditionsImport.update({
  id: '/terms-conditions',
  path: '/terms-conditions',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPrivacyPolicyRoute = LayoutPrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutOptOutRoute = LayoutOptOutImport.update({
  id: '/opt-out',
  path: '/opt-out',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutJoinRoute = LayoutJoinImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCookiesRoute = LayoutCookiesImport.update({
  id: '/cookies',
  path: '/cookies',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutCollectionsRoute = LayoutCollectionsImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAuthCompleteRoute = LayoutAuthCompleteImport.update({
  id: '/auth-complete',
  path: '/auth-complete',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutResourcesBlogRoute = LayoutResourcesBlogImport.update({
  id: '/resources/blog',
  path: '/resources/blog',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProductsIdRoute = LayoutProductsIdImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutResourcesBlogsPathRoute = LayoutResourcesBlogsPathImport.update({
  id: '/resources/blogs/$path',
  path: '/resources/blogs/$path',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/auth-complete': {
      id: '/_layout/auth-complete'
      path: '/auth-complete'
      fullPath: '/auth-complete'
      preLoaderRoute: typeof LayoutAuthCompleteImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/collections': {
      id: '/_layout/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof LayoutCollectionsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/cookies': {
      id: '/_layout/cookies'
      path: '/cookies'
      fullPath: '/cookies'
      preLoaderRoute: typeof LayoutCookiesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/join': {
      id: '/_layout/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof LayoutJoinImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/opt-out': {
      id: '/_layout/opt-out'
      path: '/opt-out'
      fullPath: '/opt-out'
      preLoaderRoute: typeof LayoutOptOutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/privacy-policy': {
      id: '/_layout/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof LayoutPrivacyPolicyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/terms-conditions': {
      id: '/_layout/terms-conditions'
      path: '/terms-conditions'
      fullPath: '/terms-conditions'
      preLoaderRoute: typeof LayoutTermsConditionsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/products/$id': {
      id: '/_layout/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof LayoutProductsIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/blog': {
      id: '/_layout/resources/blog'
      path: '/resources/blog'
      fullPath: '/resources/blog'
      preLoaderRoute: typeof LayoutResourcesBlogImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resources/blogs/$path': {
      id: '/_layout/resources/blogs/$path'
      path: '/resources/blogs/$path'
      fullPath: '/resources/blogs/$path'
      preLoaderRoute: typeof LayoutResourcesBlogsPathImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAuthCompleteRoute: typeof LayoutAuthCompleteRoute
  LayoutCollectionsRoute: typeof LayoutCollectionsRoute
  LayoutCookiesRoute: typeof LayoutCookiesRoute
  LayoutJoinRoute: typeof LayoutJoinRoute
  LayoutOptOutRoute: typeof LayoutOptOutRoute
  LayoutPrivacyPolicyRoute: typeof LayoutPrivacyPolicyRoute
  LayoutTermsConditionsRoute: typeof LayoutTermsConditionsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutProductsIdRoute: typeof LayoutProductsIdRoute
  LayoutResourcesBlogRoute: typeof LayoutResourcesBlogRoute
  LayoutResourcesBlogsPathRoute: typeof LayoutResourcesBlogsPathRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAuthCompleteRoute: LayoutAuthCompleteRoute,
  LayoutCollectionsRoute: LayoutCollectionsRoute,
  LayoutCookiesRoute: LayoutCookiesRoute,
  LayoutJoinRoute: LayoutJoinRoute,
  LayoutOptOutRoute: LayoutOptOutRoute,
  LayoutPrivacyPolicyRoute: LayoutPrivacyPolicyRoute,
  LayoutTermsConditionsRoute: LayoutTermsConditionsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutProductsIdRoute: LayoutProductsIdRoute,
  LayoutResourcesBlogRoute: LayoutResourcesBlogRoute,
  LayoutResourcesBlogsPathRoute: LayoutResourcesBlogsPathRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/auth-complete': typeof LayoutAuthCompleteRoute
  '/collections': typeof LayoutCollectionsRoute
  '/cookies': typeof LayoutCookiesRoute
  '/join': typeof LayoutJoinRoute
  '/opt-out': typeof LayoutOptOutRoute
  '/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/terms-conditions': typeof LayoutTermsConditionsRoute
  '/': typeof LayoutIndexRoute
  '/products/$id': typeof LayoutProductsIdRoute
  '/resources/blog': typeof LayoutResourcesBlogRoute
  '/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRoutesByTo {
  '/auth-complete': typeof LayoutAuthCompleteRoute
  '/collections': typeof LayoutCollectionsRoute
  '/cookies': typeof LayoutCookiesRoute
  '/join': typeof LayoutJoinRoute
  '/opt-out': typeof LayoutOptOutRoute
  '/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/terms-conditions': typeof LayoutTermsConditionsRoute
  '/': typeof LayoutIndexRoute
  '/products/$id': typeof LayoutProductsIdRoute
  '/resources/blog': typeof LayoutResourcesBlogRoute
  '/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/auth-complete': typeof LayoutAuthCompleteRoute
  '/_layout/collections': typeof LayoutCollectionsRoute
  '/_layout/cookies': typeof LayoutCookiesRoute
  '/_layout/join': typeof LayoutJoinRoute
  '/_layout/opt-out': typeof LayoutOptOutRoute
  '/_layout/privacy-policy': typeof LayoutPrivacyPolicyRoute
  '/_layout/terms-conditions': typeof LayoutTermsConditionsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/products/$id': typeof LayoutProductsIdRoute
  '/_layout/resources/blog': typeof LayoutResourcesBlogRoute
  '/_layout/resources/blogs/$path': typeof LayoutResourcesBlogsPathRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth-complete'
    | '/collections'
    | '/cookies'
    | '/join'
    | '/opt-out'
    | '/privacy-policy'
    | '/terms-conditions'
    | '/'
    | '/products/$id'
    | '/resources/blog'
    | '/resources/blogs/$path'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth-complete'
    | '/collections'
    | '/cookies'
    | '/join'
    | '/opt-out'
    | '/privacy-policy'
    | '/terms-conditions'
    | '/'
    | '/products/$id'
    | '/resources/blog'
    | '/resources/blogs/$path'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/auth-complete'
    | '/_layout/collections'
    | '/_layout/cookies'
    | '/_layout/join'
    | '/_layout/opt-out'
    | '/_layout/privacy-policy'
    | '/_layout/terms-conditions'
    | '/_layout/'
    | '/_layout/products/$id'
    | '/_layout/resources/blog'
    | '/_layout/resources/blogs/$path'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/auth-complete",
        "/_layout/collections",
        "/_layout/cookies",
        "/_layout/join",
        "/_layout/opt-out",
        "/_layout/privacy-policy",
        "/_layout/terms-conditions",
        "/_layout/",
        "/_layout/products/$id",
        "/_layout/resources/blog",
        "/_layout/resources/blogs/$path"
      ]
    },
    "/_layout/auth-complete": {
      "filePath": "_layout/auth-complete.tsx",
      "parent": "/_layout"
    },
    "/_layout/collections": {
      "filePath": "_layout/collections.tsx",
      "parent": "/_layout"
    },
    "/_layout/cookies": {
      "filePath": "_layout/cookies.tsx",
      "parent": "/_layout"
    },
    "/_layout/join": {
      "filePath": "_layout/join.tsx",
      "parent": "/_layout"
    },
    "/_layout/opt-out": {
      "filePath": "_layout/opt-out.tsx",
      "parent": "/_layout"
    },
    "/_layout/privacy-policy": {
      "filePath": "_layout/privacy-policy.tsx",
      "parent": "/_layout"
    },
    "/_layout/terms-conditions": {
      "filePath": "_layout/terms-conditions.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/products/$id": {
      "filePath": "_layout/products/$id.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/blog": {
      "filePath": "_layout/resources/blog.tsx",
      "parent": "/_layout"
    },
    "/_layout/resources/blogs/$path": {
      "filePath": "_layout/resources/blogs/$path.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
